@page "/beans"

@inherits BasePage

@inject BeanService BeansServ

<PageTitle>Beans Admin</PageTitle>

<div class="mb-8 flex w-full justify-center">
    <InputText @oninput="HandleSearchInputChanged" @bind-Value="@_searchText" class="w-[50%] rounded-xl border border-neutral-700 bg-neutral-800 px-2 py-1 text-sm focus-visible:outline focus-visible:outline-purple-300" placeholder="Search beans..." />
</div>

<BeanGrid Beans="_beans" OnEditBeanClicked="HandleEditBeanClicked" />

<EditBeanModal @ref="@_editBeanModal" />

@code {
    private List<BeanModel> _beans = new();

    private List<BeanModel> _allBeans = new();

    private string _searchText = string.Empty;

    private EditBeanModal? _editBeanModal;

    protected override async Task OnInitializedAsync()
    {
        _allBeans = await BeansServ.GetAllBeans();

        _beans = _beans = SortBeans(_allBeans);
    }

    private void HandleSearchInputChanged(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        SearchBeans((string)args.Value);
    }

    private void SearchBeans(string searchText)
    {
        searchText = searchText.Trim().ToLower();

        if (string.IsNullOrEmpty(searchText))
        {
            _beans = SortBeans(_allBeans);
            return;
        }

        var unsortedBeans = _allBeans.Where(bean => bean.FullName.ToLower().Contains(searchText)
                                                    || (bean.ProcessingMethods != null && bean.ProcessingMethods.Any(method => method.ToString().ToLower().Contains(searchText)))
                                                    || bean.RoastLevel.ToString().ToLower().Contains(searchText)
                                                    || (bean.Origins != null && bean.Origins.Any(origin => origin.GetOriginFullAddress().ToLower().Contains(searchText)))
        );

        _beans = SortBeans(unsortedBeans);

    }

    private List<BeanModel> SortBeans(IEnumerable<BeanModel> unsortedBeans)
    {
        return unsortedBeans
            .OrderBy(bean => bean.IsExcluded)
            .ThenBy(bean => bean.DateAdded)
            .ToList();
    }

    private async Task HandleEditBeanClicked(string beanId)
    {
        if (_editBeanModal == null)
        {
            return;
        }

        await _editBeanModal.Show(beanId);
    }
}
