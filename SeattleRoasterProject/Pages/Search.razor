@page "/search"
@using Ljbc1994.Blazor.IntersectionObserver
@inject IIntersectionObserverService ObserverService
@inject BeanService BeanServ
@inject RoasterService RoasterServ
@inject IJSRuntime JsRuntime
@inject FavoritesService FavoriteService
@inject BeanSortingService SortingService

<div class="pb-[10rem]">
    <BeanSearch OnSortChanged="HandleBeanSortChanged"/>

    <div id="beanDetailParent" class="grid-cols-1 mx-4 grid gap-x-4 gap-y-9 md:grid-cols-2 xl:grid-cols-3 3xl:grid-cols-4">
        @if (_isLoading)
        {
            @for (var i = 0; i < NumberOfPlaceholders; i++)
            {
                <BeanDetailPlaceholder></BeanDetailPlaceholder>
            }
        }
        else
        {
            <CascadingValue Value="@_favoritedBeanIds">
                @foreach (var listing in _currentVisibleListings)
                {
                    <BeanDetail Listing="@listing"></BeanDetail>
                }
            </CascadingValue>
        }
    </div>
    <div class="h-10" @ref="@_bottomOfBeans"></div>
</div>

@code {
    private List<BeanModel> _beans = new();

    private bool _isLoading;

    private List<RoasterModel> _roasters = new();
    private List<BeanListingModel> _currentVisibleListings = new();

    private ElementReference _bottomOfBeans;
    private SortMethod _sortMethod = new();

    private int _currentPageIndex;

    private const int PageSize = 26;
    private const int NumberOfPlaceholders = 20;

    private readonly List<string> _favoritedBeanIds = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        _beans = await BeanServ.GetAllBeans();
        _beans = _beans.OrderByDescending(bean => bean.GetTraceabilityScore()).ToList();

        _roasters = await RoasterServ.GetAllRoasters();

        _currentPageIndex = 0;
        SetCurrentVisibleBeans();
        await GetFavorites();

        _isLoading = false;
    }

    private async Task GetFavorites()
    {
        var favorites = await FavoriteService.GetFavorites(JsRuntime);
        _favoritedBeanIds.Clear();

        foreach (var favorite in favorites)
        {
            _favoritedBeanIds.Add(favorite.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupObserver();
        }
    }

    private void SetCurrentVisibleBeans()
    {
        var listings = _beans.Select(bean => BeanListingModel.FromBeanAndRoasters(bean, _roasters));
        var sorted = SortingService.SortBeanListings(listings, _sortMethod);

        _currentVisibleListings.AddRange(sorted.Take(new Range(_currentPageIndex * PageSize, _currentPageIndex * PageSize + PageSize)).ToList());
    }

    private async Task SetupObserver()
    {
        await ObserverService.Observe(_bottomOfBeans, entries =>
        {
            var entry = entries.FirstOrDefault();

            if (entry.IsIntersecting)
            {
                _currentPageIndex++;
                SetCurrentVisibleBeans();
                StateHasChanged();
            }
        });
    }

    private void HandleBeanSortChanged(SortMethod method)
    {
        _sortMethod = method;

        _currentVisibleListings.Clear();

        SetCurrentVisibleBeans();
    }
}