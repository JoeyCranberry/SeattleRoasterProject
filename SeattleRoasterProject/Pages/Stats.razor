@page "/stats"

@inject BeanService beanServ
@inject FavoritesService favServ
@inject RoasterService roasterServ
@inject EnvironmentSettings envSettings
@inject IConfiguration config

@if (allRoasters != null)
{
	@if (beansPerRoaster != null)
	{
		<div class="row">
			<table class="table text-crema w-50">
				<thead>
					<tr>
						<th scope="col">Roaster</th>
						<th scope="col">Beans</th>
						<th scope="col">Permission</th>
					</tr>
				</thead>
				<tbody>
					@foreach (RoasterModel roaster in allRoasters)
					{
						@if (beansPerRoaster.ContainsKey(roaster.Id))
						{
							<tr>
							<td>@roaster.Name</td>
							<td>
								@if(beansPerRoaster.ContainsKey(roaster.Id))
								{
									@beansPerRoaster[roaster.Id]
								}
							</td>
							<td>
								@if (roaster.RecievedPermission)
								{
									<span class="bi bi-check text-success"></span>
								}
								else
								{
									<span class="bi bi-x text-danger"></span>
								}
							</td>
						</tr>
						}
					}
				</tbody>
			</table>

		</div>
	}
}

@code {
	private EnvironmentSettings.Environment curEnviroment = EnvironmentSettings.Environment.PRODUCTION;

	List<RoasterModel>? allRoasters;
	List<BeanModel>? allBeans;

	Dictionary<string, int> beansPerRoaster = new();

	protected override async Task OnInitializedAsync()
	{
		curEnviroment = EnvironmentSettings.Environment.DEVELOPMENT;
		allRoasters = await roasterServ.GetAllRoastersbyEnviroment(curEnviroment);

		allRoasters.OrderBy(r => r.RecievedPermission).ThenBy(r => r.Name);
	}
}
