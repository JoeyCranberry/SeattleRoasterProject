@page "/beans/{quizQueryString?}"

@inject SearchBeanEncoderService searchServ
@inject EnviromentSettings envSettings
@inject IConfiguration config
@inject BeanFilterService filterServ

<BeanFilterDisplay @ref="filterDisplay" OnBeanFilterSearch="HandleFilterSearch" OnSortChanged="HandleSortChanged" CurEnviroment="curEnviroment"></BeanFilterDisplay>
<BeanLisiting @ref="listing" OnComponentInitialized="BeanListingInitialized" CurEnviroment="curEnviroment"></BeanLisiting>

@code {
	private BeanLisiting? listing;
	private BeanFilterDisplay? filterDisplay;

	[Parameter]
	public string? quizQueryString { get; set; }

	private EnviromentSettings.Enviroment curEnviroment = EnviromentSettings.Enviroment.PRODUCTION;

	protected override void OnInitialized()
	{
		curEnviroment = envSettings.GetEnviroment(config);
	}

	private async Task BeanListingInitialized()
	{
		if (!String.IsNullOrEmpty(quizQueryString) && listing != null)
		{
			var decodedFilter = searchServ.DecodeQuizResult(quizQueryString);
			await listing.ApplyFilter(decodedFilter, true);
			filterDisplay?.SetSearchText(filterServ.GetSearchTermsFromFilter(decodedFilter));
		}
	}

	private async Task HandleFilterSearch(BeanFilter filter)
	{
		if (listing != null)
		{
			await listing.ApplyFilter(filter);
		}
	}

	private void HandleSortChanged(SortMethod method)
	{
		if (listing != null)
		{
			listing.SetActiveSort(method);
		}
	}
}
