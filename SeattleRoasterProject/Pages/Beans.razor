@page "/beans/"

@using Microsoft.AspNetCore.WebUtilities
@inject SearchBeanEncoderService searchServ
@inject EnviromentSettings envSettings
@inject IConfiguration config
@inject BeanFilterService filterServ
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime

<PageTitle>Search - Seattle Roaster Project</PageTitle>

@if (allBeans != null)
{
	<BeanFilterDisplay @ref="filterDisplay" AllBeans="allBeans" OnBeanFilterSearch="HandleFilterSearch" OnSortChanged="HandleSortChanged" CurEnviroment="curEnviroment"></BeanFilterDisplay>
}

<BeanLisiting @ref="listing" OnComponentInitialized="HandleBeanListingInitialized" OnFirstAllBeansRetrieved="HandleBeanListingFirstBeanRetrieval" CurEnviroment="curEnviroment"></BeanLisiting>

@code {
	private BeanLisiting? listing;
	private BeanFilterDisplay? filterDisplay;
	private List<BeanModel>? allBeans;

	[Parameter]
	public string? quizQueryString { get; set; }

	private EnviromentSettings.Enviroment curEnviroment = EnviromentSettings.Enviroment.PRODUCTION;

	protected override void OnInitialized()
	{
		curEnviroment = envSettings.GetEnviroment(config);
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("ScrollToTop");
		}
	}

	private async Task HandleBeanListingInitialized(List<RoasterModel> allRoasters)
	{
		var uri = navManager.ToAbsoluteUri(navManager.Uri);

		// Get QuizCode from url
		Microsoft.Extensions.Primitives.StringValues quizCode;
		bool foundQuizCode = QueryHelpers.ParseQuery(uri.Query).TryGetValue("quizCode", out quizCode);
		if (foundQuizCode)
		{
			quizQueryString = quizCode.First();

			if (!String.IsNullOrEmpty(quizQueryString) && listing != null)
			{
				var decodedFilter = searchServ.DecodeQuizResult(quizQueryString);
				await listing.ApplyFilter(decodedFilter, true);
				filterDisplay?.SetSearchText(filterServ.GetSearchTermsFromFilter(decodedFilter));
			}
		}
		else
		{
			// Get SearchFor from url
			Microsoft.Extensions.Primitives.StringValues searchFor;
			bool foundSearchFor = QueryHelpers.ParseQuery(uri.Query).TryGetValue("searchFor", out searchFor);
			if (foundSearchFor)
			{
				string searchForValue = searchFor.First() ?? String.Empty;

				if (listing != null && !String.IsNullOrEmpty(searchForValue))
				{
					searchForValue = searchForValue.Replace("+", "");
					BeanFilter filterFromUrl = await filterServ.BuildFilterFromSearchTerms(searchForValue, allRoasters, curEnviroment);
					await listing.ApplyFilter(filterFromUrl, false);
					filterDisplay?.SetSearchText(searchForValue);
				}
			}
		}
	}

	private void HandleBeanListingFirstBeanRetrieval(List<BeanModel> _allBeans)
	{
		allBeans = _allBeans;
	}

	private async Task HandleFilterSearch(BeanFilter filter)
	{
		if (listing != null)
		{
			await listing.ApplyFilter(filter);
		}
	}

	private void HandleSortChanged(SortMethod method)
	{
		if (listing != null)
		{
			listing.SetActiveSort(method);
		}
	}
}
