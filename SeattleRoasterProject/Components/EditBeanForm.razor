@inject IJSRuntime JSRuntime
@inject BeanService beanServ

<div class="modal fade" id="editBeanModal" tabindex="-1" aria-labelledby="editBeanModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header my-0 py-1">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Edit Bean</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>

			<EditForm Model="@editBean">
				<div class="modal-body">
					<!-- Basic Info -->
					<div class="row">
						<div class="col-2">
							<label for="inBeanId" class="form-label">ID</label>
							<InputText id="inBeanId" @bind-Value="editBean.Id" placeholder="0" class="form-control" disabled="true" />
						</div>
						<div class="col-10">
							<label for="inName" class="form-label">Name</label>
							<InputText id="inName" @bind-Value="editBean.FullName" placeholder="Roasters Inc." class="form-control" />
						</div>
					</div>

					<!-- Product and Image links -->
					<label for="inProductURL" class="form-label">Product URL</label>
					<div class="d-flex justify-content-between mb-3">
						<InputText id="inProductURL" @bind-Value="editBean.ProductURL" placeholder="0" class="form-control w-75" />
						<a href="@editBean.ProductURL" class="btn btn-primary" target="_blank"><span class="bi bi-box-arrow-up-right"></span></a>
					</div>

					<div class="row">
						<div class="col-4 border border-light rounded px-0 ms-3">
							<img class="rounded w-100 @editBean.ImageClass" src="@editBean.ImageURL" />
						</div>
						<div class="col-7">
							<label for="inImageURL" class="form-label pt-2">Image URL</label>
							<InputText id="inImageURL" @bind-Value="editBean.ImageURL" placeholder="https://www.roastersite.com/image.png" class="form-control" />

							<label for="inImageClass" class="form-label pt-2">Image Class</label>
							<InputText id="inImageClass" @bind-Value="editBean.ImageClass" placeholder="bg-light" class="form-control" />
						</div>
					</div>

					<hr class="mb-1" />

					<!-- Processing, Roast, Organic Cert, and Price -->
					<div class="row">
						<div class="col-6">
							<label for="inProcessingMethod" class="form-label pt-2">Process</label>
							<InputSelect id="inProcessingMethod" @bind-Value="editBean.ProcessingMethod" class="form-control">
								@foreach (var method in Enum.GetValues<BeanProcessing>().OrderBy(e => e.ToString()))
								{
									<option value="@method">@method</option>
								}
							</InputSelect>
						</div>

						<div class="col-6">
							<label for="inRoastLevel" class="form-label pt-2">Roast</label>
							<InputSelect id="inRoastLevel" @bind-Value="editBean.RoastLevel" class="form-control">
								@foreach (var level in Enum.GetValues<RoastLevel>().OrderBy(e => e.ToString()))
								{
									<option value="@level">@level</option>
								}
							</InputSelect>
						</div>
					</div>

					<div class="row">
						<div class="col-6">
							<label for="inOrganic" class="form-label pt-2">Organic</label>
							<InputSelect id="inOrganic" @bind-Value="editBean.OrganicCerification" class="form-control">
								@foreach (var cerification in Enum.GetValues<OrganicCerification>().OrderBy(e => e.ToString()))
								{
									<option value="@cerification">@cerification</option>
								}
							</InputSelect>
						</div>

						<div class="col-6">
							<label for="inPrice" class="form-label pt-2">Price</label>
							<InputNumber id="inPrice" @bind-Value="editBean.PriceBeforeShipping" placeholder="0.00" class="form-control" />

						</div>
					</div>

					<!-- Bool checboxes -->
					<div class="row">
						<div class="col">
							<InputCheckbox id="inDecaf" @bind-Value="editBean.IsDecaf"></InputCheckbox>
							<label for="inDecaf" class="form-label pt-2">Decaf</label>
						</div>
						<div class="col">
							<InputCheckbox id="inSingleOrigin" @bind-Value="editBean.IsSingleOrigin"></InputCheckbox>
							<label for="inSingleOrigin" class="form-label pt-2">Single Origin</label>
						</div>
					</div>

					<div class="row">
						<div class="col">
							<InputCheckbox id="inFairTrade" @bind-Value="editBean.IsFairTradeCertified"></InputCheckbox>
							<label for="inFairTrade" class="form-label pt-2">Fair Trade</label>
						</div>
						<div class="col">
							<InputCheckbox id="inDirectTrade" @bind-Value="editBean.IsDirectTradeCertified"></InputCheckbox>
							<label for="inDirectTrade" class="form-label pt-2">Direct Trade</label>
						</div>
					</div>

					<div class="row">
						<div class="col">
							<InputCheckbox id="inExcluded" @bind-Value="editBean.IsExcluded"></InputCheckbox>
							<label for="inExcluded" class="form-label pt-2">Excluded</label>
						</div>
					</div>

					<hr class="mb-1" />

					<!-- Countrues of Origin -->
					<div class="row">
						<label for="inCountryOfOrigin" class="form-label pt-2">Origin Countries</label>

						<ul class="list-group ms-2" style="width: 90%;">
							@if (editBean.CountriesOfOrigin == null)
							{
								<li class="list-group-item bg-coffee d-flex justify-content-between">
									<InputSelect id="inCountriesOfOrigin" @bind-Value="newCountry" class="form-control w-75">
										@foreach (var country in Enum.GetValues<Country>().OrderBy(c => c.ToString()))
										{
										<option value="@country">@editBean.GetCountryDisplayName(country)</option>
										}
								</InputSelect>

								<button class="btn btn-success" @onclick="AddCountry"><span class="bi bi-plus text-white"></span></button>
							</li>
							}
							else
							{
								@foreach (var country in editBean.CountriesOfOrigin)
								{
									<li class="list-group-item bg-coffee d-flex justify-content-between">
										<div class="form-control bg-disabled w-75">
											@editBean.GetCountryDisplayName(country)
										</div>

										<button class="btn btn-danger" @onclick="@(e => RemoveCountry(country))">
											<span class="bi bi-dash text-white"></span>
										</button>
									</li>
								}
								<li class="list-group-item bg-coffee d-flex justify-content-between">
									<InputSelect id="inCountriesOfOrigin" @bind-Value="newCountry" class="form-control w-75">
										@foreach (var country in Enum.GetValues<Country>().Where(c => !editBean.CountriesOfOrigin.Contains(c)).OrderBy(c => c.ToString()))
										{
										<option value="@country">@editBean.GetCountryDisplayName(country)</option>
										}
								</InputSelect>
								<button class="btn btn-success" @onclick="AddCountry">
									<span class="bi bi-plus text-white"></span>
								</button>
							</li>
							}
						</ul>
					</div>

					<!-- Tasting Notes -->
					<div class="row">
						<label for="inTastingNotes" class="form-label pt-2">Tasting Notes</label>

						<ul class="list-group ms-2" style="width: 90%;">
							@if (editBean.TastingNotes == null)
							{
								<li class="list-group-item bg-coffee d-flex justify-content-between">
									<InputText id="inTastingNotes" @bind-Value="newTastingNote" placeholder="Peaches, Milk Chocolate" class="form-control w-75">

									</InputText>

									<button class="btn btn-success" @onclick="AddTastingNote"><span class="bi bi-plus text-white"></span></button>
								</li>
							}
							else
							{
								@foreach (string note in editBean.TastingNotes)
								{
									<li class="list-group-item bg-coffee d-flex justify-content-between">
										<div class="form-control bg-disabled w-75">
											@note
										</div>

										<button class="btn btn-danger" @onclick="@(e => RemoveTastingNote(note))">
											<span class="bi bi-dash text-white"></span>
										</button>
									</li>
								}

								<li class="list-group-item bg-coffee d-flex justify-content-between">
									<InputText id="inTastingNotes" @bind-Value="newTastingNote" placeholder="Peaches, Milk Chocolate" class="form-control w-75">

									</InputText>
									<button class="btn btn-success" @onclick="AddTastingNote">
										<span class="bi bi-plus text-white"></span>
									</button>
								</li>
							}
						</ul>
					</div>

					<DataAnnotationsValidator />
					<ValidationSummary />
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-danger" @onclick="DeleteBean">
						<div class="spinner-border spinner-border-sm d-none" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
						<span class="bi bi-trash pe-2"></span>
						Delete
					</button>

					<button type="button" class="btn btn-primary" @onclick="UpdateBean">
						<div class="spinner-border spinner-border-sm d-none" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
						<span class="bi bi-pencil pe-2"></span>
						Save Changes
					</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>
@code {
	[Parameter]
	public EventCallback<string> OnBeanUpdated { get; set; }
	[Parameter]
	public EventCallback<string> OnBeanDeleted { get; set; }

	private BeanModel? originalBean;
	private BeanModel editBean = new BeanModel();

	private Country newCountry;

	private string newTastingNote;

	private bool editIsWorking = false;
	private bool deleteIsWorking = false;

	public async Task EditBean(BeanModel bean)
	{
		originalBean = bean;
		editBean = bean;
		StateHasChanged();

		await ShowEditModal();
	}

	private async Task ShowEditModal()
	{
		await JSRuntime.InvokeVoidAsync("ShowModal", "#editBeanModal");
	}

	private async Task HideEditModal()
	{
		await JSRuntime.InvokeVoidAsync("HideModal", "#editBeanModal");
	}

	private void AddCountry()
	{
		if (editBean.CountriesOfOrigin == null)
		{
			editBean.CountriesOfOrigin = new List<Country>();
		}

		editBean.CountriesOfOrigin.Add(newCountry);
	}

	private void RemoveCountry(Country delCountry)
	{
		editBean.CountriesOfOrigin.Remove(delCountry);
	}

	private void AddTastingNote()
	{
		if (editBean.TastingNotes == null)
		{
			editBean.TastingNotes = new List<string>();
		}

		List<string> split = newTastingNote.Replace("and", "").Split(",").ToList();

		editBean.TastingNotes.AddRange(split);
	}

	private void RemoveTastingNote(string delTastingNote)
	{
		editBean.TastingNotes.Remove(delTastingNote);
	}

	private async Task DeleteBean()
	{
		await beanServ.DeleteBean(editBean);
		await OnBeanDeleted.InvokeAsync(editBean.FullName);

		ResetFields();

		await HideEditModal();
	}

	private async Task UpdateBean()
	{
		await beanServ.UpdateExistingBean(editBean);
		await OnBeanUpdated.InvokeAsync(editBean.FullName);

		ResetFields();

		await HideEditModal();
	}

	private void ResetFields()
	{
		editBean = new BeanModel();
		originalBean = null;
		newTastingNote = String.Empty;
		newCountry = Country.UNKNOWN;
	}
}
