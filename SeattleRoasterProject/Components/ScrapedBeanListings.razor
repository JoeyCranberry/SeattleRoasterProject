@inject BeanService beanServ;

@if (RoasterLookup != null)
{
	@if (NewBeans != null)
	{
		<h2 class="text-light text-center">
			Beans Added (@NewBeans.Count)
			<button type="submit" class="btn btn-success" disabled=@isAdding @onclick="AddAllBeans">
				<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
				<span class="bi bi-plus"></span>
				Add All New
			</button>
		</h2>

		<div class="row text-center">
			<span class="text-opacity-50">@addedExcludedCount Excluded</span>
		</div>

		<div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
			@foreach (BeanModel bean in NewBeans)
			{
				<div class="card mx-3 shadow px-3 py-1">
					<RoasterCardHeader Roaster="@RoasterLookup[bean.MongoRoasterId]"></RoasterCardHeader>
					<BeanCardBody bean="bean"></BeanCardBody>
					<div class="card-footer row">
						<div class="row">
							<div class="col-6 justify-content-start">
								<BeanPrice Bean="bean"></BeanPrice>
							</div>
						</div>
						<hr class="my-1" />
						<div class="row mt-1">
							<div class="col-6">
								<button type="button" class="btn btn-warning" @onclick="@(e => ToggleExludeBean(bean))">
									@if (bean.IsExcluded)
									{
										<span class="bi bi-slash-square-fill pe-2"></span>

										<span>Un-exclude</span>
									}
									else
									{
										<span class="bi bi-slash-square pe-2"></span>

										<span>Exclude</span>
									}
								</button>
							</div>
							<div class="col-6 d-flex justify-content-end">
								<button type="submit" class="btn btn-success" disabled=@isAdding @onclick="@(e => AddBean(bean))">
									<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
										<span class="visually-hidden">Loading...</span>
									</div>
									<span class="bi bi-plus"></span>
									Add
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	}

	@if (RemovedBeans != null)
	{
		<h2 class="text-light text-center mt-5">
			Beans Removed (@RemovedBeans.Count)

			<button type="submit" class="btn btn-danger" @onclick="DeleteAllBeans">
				<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
				<span class="bi bi-trash"></span>
				Delete All Removed
			</button>
		</h2>

		<div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
			@foreach (BeanModel bean in RemovedBeans)
			{
				<div class="card mx-3 shadow px-3 py-1">
					<RoasterCardHeader Roaster="@RoasterLookup[bean.MongoRoasterId]"></RoasterCardHeader>
					<BeanCardBody bean="bean"></BeanCardBody>
					<div class="card-footer row">
						<div class="col-8 justify-content-start">
							<BeanPrice Bean="bean"></BeanPrice>
						</div>

						<div class="col-4 d-flex justify-content-end">
							<button type="submit" class="btn btn-danger" disabled=@isAdding @onclick="@(e => DeleteBean(bean))">
								<div class="spinner-border spinner-border-sm @removeSpinnerDisplay" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
								<span class="bi bi-trash"></span>
								Delete
							</button>
						</div>
					</div>
				</div>
			}
		</div>
	}
}


@if (NewBeans != null && RemovedBeans != null)
{
	<hr />
}


@code {
	[Parameter]
	public List<BeanModel>? NewBeans { get; set; }

	[Parameter]
	public List<BeanModel>? RemovedBeans { get; set; }

	[Parameter]
	public List<RoasterModel>? Roasters { get; set; }
	private Dictionary<string, RoasterModel>? RoasterLookup;

	private bool isAddingAll = false;
	private string addingAllSpinnerDisplay = "d-none";

	private bool isAdding = false;
	private string addingSpinnerDisplay = "d-none";

	private string removeSpinnerDisplay = "d-none";

	private int addedExcludedCount = 0;

	protected override void OnParametersSet()
	{
		SetExcludedCount();

		if (RoasterLookup == null && Roasters != null)
		{
			RoasterLookup = new();
			foreach (RoasterModel roaster in Roasters)
			{
				RoasterLookup.Add(roaster.Id, roaster);
			}
		}
	}

	private async Task AddBean(BeanModel newBean)
	{
		isAdding = true;
		addingSpinnerDisplay = "";

		newBean.IsProductionVisible = false;

		await beanServ.AddBeanToDb(newBean);
		if (NewBeans != null)
		{
			NewBeans.Remove(newBean);

			SetExcludedCount();
		}

		isAdding = false;
		addingSpinnerDisplay = "d-none";
	}

	private async Task AddAllBeans()
	{
		isAddingAll = true;
		addingAllSpinnerDisplay = "";

		if (NewBeans != null)
		{
			foreach (BeanModel bean in NewBeans)
			{
				bean.IsProductionVisible = false;
				await beanServ.AddBeanToDb(bean);
			}

			NewBeans.Clear();

			SetExcludedCount();
		}

		isAddingAll = false;
		addingAllSpinnerDisplay = "d-none";
	}

	private async Task DeleteBean(BeanModel delBean)
	{
		removeSpinnerDisplay = "";

		await beanServ.DeleteBean(delBean);
		if (RemovedBeans != null)
		{
			RemovedBeans.Remove(delBean);
		}

		removeSpinnerDisplay = "d-none";
	}

	private async Task DeleteAllBeans()
	{
		removeSpinnerDisplay = "";

		if (RemovedBeans != null)
		{
			foreach (BeanModel bean in RemovedBeans)
			{
				await beanServ.DeleteBean(bean);
			}

			RemovedBeans.Clear();
		}

		removeSpinnerDisplay = "d-none";
	}

	private void ToggleExludeBean(BeanModel exBean)
	{
		exBean.IsExcluded = !exBean.IsExcluded;
		SetExcludedCount();
	}

	private void SetExcludedCount()
	{
		if (NewBeans != null)
		{
			addedExcludedCount = NewBeans.Where(b => b.IsExcluded).Count();
		}
	}
}
