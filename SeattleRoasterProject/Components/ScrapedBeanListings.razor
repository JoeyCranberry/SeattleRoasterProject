@inject BeanService beanServ;

@if (NewBeans != null)
{
	<h2 class="text-light text-center">
		Beans Added (@NewBeans.Count)
		<button type="submit" class="btn btn-success" disabled=@isAdding @onclick="AddAllBeans">
		<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
		<span class="bi bi-plus"></span>
		Add All New
	</button>
	</h2>

	<div class="row text-center">
		<span class="text-opacity-50">@addedExcludedCount Excluded</span>
	</div>

	<div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
		@foreach (BeanModel bean in NewBeans)
		{
			<div class="card mx-3 shadow px-3 py-1">
				<RoasterCardHeader Roaster="Roaster"></RoasterCardHeader>
				<BeanCardBody bean="bean"></BeanCardBody>
				<div class="card-footer row">
					<div class="col-8 justify-content-start">
						<BeanPrice Bean="bean"></BeanPrice>
					</div>

					<div class="col-4 d-flex justify-content-end">
						<button type="submit" class="btn btn-success" disabled=@isAdding @onclick="@(e => AddBean(bean))">
							<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
							<span class="bi bi-plus"></span>
							Add
						</button>
					</div>
				</div>
			</div>
		}
	</div>
}

@if (RemovedBeans != null)
{
	<h2 class="text-light">Beans Removed</h2>
	<div class="row row-cols-1 row-cols-md-3 g-3">
		@foreach (BeanModel bean in RemovedBeans)
		{
			<div class="card mx-3 shadow px-3 py-1">
				<RoasterCardHeader Roaster="Roaster"></RoasterCardHeader>
				<BeanCardBody bean="bean"></BeanCardBody>
				<div class="card-footer row">
					<div class="col-8 justify-content-start">
						<BeanPrice Bean="bean"></BeanPrice>
					</div>

					<div class="col-4 d-flex justify-content-end">
						<button type="submit" class="btn btn-success" disabled=@isAdding @onclick="@(e => AddBean(bean))">
							<div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
							<span class="bi bi-plus"></span>
							Add
						</button>
					</div>
				</div>
			</div>
		}
	</div>
}

@if (NewBeans != null && RemovedBeans != null)
{
	<hr />
}


@code {
	[Parameter]
	public List<BeanModel>? NewBeans { get; set; }

	[Parameter]
	public List<BeanModel>? RemovedBeans { get; set; }

	[Parameter]
	public RoasterModel Roaster { get; set; }

	private bool isAddingAll = false;
	private string addingAllSpinnerDisplay = "d-none";

	private bool isAdding = false;
	private string addingSpinnerDisplay = "d-none";

	private int addedExcludedCount = 0;

	protected override void OnParametersSet()
	{
		if (NewBeans != null)
		{
			addedExcludedCount = NewBeans.Where(b => b.IsExcluded).Count();
		}
	}

	private async Task AddBean(BeanModel newBean)
	{
		isAdding = true;
		addingSpinnerDisplay = "";

		await beanServ.AddBeanToDb(newBean);
		NewBeans.Remove(newBean);

		isAdding = false;
		addingSpinnerDisplay = "d-none";
	}

	private async Task AddAllBeans()
	{
		isAddingAll = true;
		addingAllSpinnerDisplay = "";

		foreach (BeanModel bean in NewBeans)
		{
			await beanServ.AddBeanToDb(bean);
		}

		NewBeans.Clear();

		isAddingAll = false;
		addingAllSpinnerDisplay = "d-none";
	}

	private async Task DeleteBean(BeanModel delBean)
	{
		await beanServ.AddBeanToDb(delBean);
	}
}
