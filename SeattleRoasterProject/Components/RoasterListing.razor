@inject RoasterService roasterServ
@inject IJSRuntime JSRuntime

<ScrapedBeanListings NewBeans="scrapedNewBeans" RemovedBeans="scrapeRemovedBeans" Roasters="roasters"></ScrapedBeanListings>

@if (roasters != null)
{
	<div class="row">
		<div class="col-3">
			<AddRoasterForm OnRoasterAdded="HandleNewRoaster" CurEnviroment="CurEnviroment"></AddRoasterForm>
		</div>
		<div class="col-3">
			<button class="btn btn-primary" @onclick="UpdateAllRoasterListings">
				<span class="bi bi-arrow-clockwise pe-2"></span>
				Update All Roasters
			</button>
		</div>

		<div class="col-3">
			<button class="btn btn-primary" @onclick="UpdateRoastersWithPermission">
				<span class="bi bi-arrow-clockwise pe-2"></span>
				Update Roasters w/ Permission
			</button>
		</div>
	</div>

	<div class="row mb-3 justify-content-center">
		<small class="text-center text-faded">@contactedCount contacted, @recievedPermissionCount have given permission, @(roasters.Count - contactedCount) remaining</small>
	</div>
	<div class="row row-cols-3 row-cols-md-3 gy-4 justify-content-center">
		@foreach (RoasterModel roaster in roasters)
		{
			<div class="col">
				<div class="card">
					<div class="card-header pt-1 pb-0 ">
						<h5 class="card-title">
							@if (!String.IsNullOrEmpty(roaster.ImageURL))
							{
								<img src="@roaster.ImageURL" class="rounded roasterImage me-1 @roaster.ImageClass" alt="@roaster.Name">
							}
							@roaster.Name
						</h5>
					</div>

					<div class="card-body pt-1">
						<div class="row mb-2">
							<div class="col-12">
								@if (roaster.HasParser)
								{
									<span class="badge rounded-pill border me-1">Has Parser</span>
								}
								@if (roaster.ContactedForPermission)
								{
									<span class="badge rounded-pill border me-1">Contacted</span>
								}
								@if (roaster.RecievedPermission)
								{
									<span class="badge rounded-pill border border-success me-1">Recived Permission</span>
								}
							</div>
						</div>

						<p class="mb-2">@roaster.Description</p>
						<p>Location: @roaster.Location</p>
						@if (roaster.FoundingYear != 0)
						{
							<span class="mb-2">Founded: @roaster.FoundingYear</span>
						}
					</div>
					<div class="card-footer d-flex justify-content-between">
						<a href=@roaster.ShopURL target="_blank" class="btn btn-primary">Shop</a>
						@if (roaster.HasParser)
						{
							<div>
								<button class="btn btn-primary btn-sm" @onclick="@(e => RefreshRoasterListings(roaster))" disabled=@isScraping>
									<div class="spinner-border spinner-border-sm @scrapingSpinnerClass" role="status">
										<span class="visually-hidden">Loading...</span>
									</div>
									<span class="bi bi-arrow-clockwise"></span>
								</button>
							</div>
						}

						<button class="btn btn-primary btn-sm" @onclick="@(e => EditRoaster(roaster))"><span class="bi bi-pencil"></span></button>
					</div>
				</div>
			</div>
		}
	</div>

	<RoasterUpdatingToast @ref=updatingToast></RoasterUpdatingToast>

	<ErrorToast @ref=parseErrorToast></ErrorToast>
	<EditRoasterForm @ref="editRoaster" CurEnviroment="CurEnviroment" OnRoasterUpdated="HandleRoasterEdited" OnRoasterDeleted="HandleRoasterDeleted"></EditRoasterForm>
}

@code {
	[Parameter]
	public EnvironmentSettings.Environment CurEnviroment { get; set; }

	private List<RoasterModel>? roasters;

	private EditRoasterForm? editRoaster;
	private RoasterUpdatingToast? updatingToast;
	private ErrorToast? parseErrorToast;

	private List<BeanModel>? scrapedNewBeans;
	private List<BeanModel>? scrapeRemovedBeans;

	private RoasterModel? updatingRoaster;

	private bool isScraping = false;
	private string scrapingSpinnerClass = "d-none";

	private int contactedCount = 0;
	private int recievedPermissionCount = 0;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task EditRoaster(RoasterModel clickedRoaster)
	{
		await editRoaster.EditRoaster(clickedRoaster);
	}

	private async Task RefreshRoasterListings(RoasterModel refRoaster)
	{
		isScraping = true;

		await updatingToast.AddNewToast(refRoaster.Name);
		updatingRoaster = refRoaster;

		var results = await roasterServ.CheckForUpdate(refRoaster, CurEnviroment);
		if (results.isSuccessful)
		{
			scrapedNewBeans = results.NewListings ?? new List<BeanModel>();
			scrapeRemovedBeans = results.RemovedListings ?? new List<BeanModel>();
		}
		else
		{
			await parseErrorToast.AddNewToast("Error parsing listings");
		}

		isScraping = false;
		await updatingToast.HideToast();
	}

	private async Task UpdateAllRoasterListings()
	{
		await UpdateRoasters(false);
	}

	private async Task UpdateRoastersWithPermission()
	{
		await UpdateRoasters(true);
	}

	private async Task UpdateRoasters(bool requiresPermission)
	{
		if(updatingToast == null || roasters == null)
		{
			return;
		}

		isScraping = true;

		List<RoasterModel> roastersToUpdate = new();

		if (requiresPermission)
		{
			await updatingToast.AddNewToast("all roasters with permission");
			roastersToUpdate = roasters.Where(r => r.HasParser && r.RecievedPermission).ToList();

		}
		else
		{
			await updatingToast.AddNewToast("all roasters");
			roastersToUpdate = roasters.Where(r => r.HasParser).ToList();
		}

		scrapedNewBeans = new List<BeanModel>();
		scrapeRemovedBeans = new List<BeanModel>();

		// Iterate over each roaster that has a parser
		for (int i = 0; i < roastersToUpdate.Count; i++)
		{
			RoasterModel roaster = roastersToUpdate[i];
			if (roaster.HasParser && (roaster.RecievedPermission || !requiresPermission))
			{
				updatingToast.UpdateRoasterName($"{roaster.Name} ({i + 1}/{roastersToUpdate.Count + 1})");

				// Check for any new or removed bean listings
				var results = await roasterServ.CheckForUpdate(roaster, CurEnviroment);

				// If there are new/removed beans add them to scraped display
				if (results.isSuccessful)
				{
					if (results.NewListings != null)
					{
						scrapedNewBeans.AddRange(results.NewListings);
					}

					if (results.RemovedListings != null)
					{
						scrapeRemovedBeans.AddRange(results.RemovedListings);
					}
				}
				else
				{
					await parseErrorToast.AddNewToast($"Error parsing listings for roaster {roaster.Name}");
				}
			}
		}

		await JSRuntime.InvokeVoidAsync("ScrollToTop");

		isScraping = false;
		await updatingToast.HideToast();
	}

	public async Task RefreshData()
	{
		await GetData();
	}

	private async Task GetData()
	{
		roasters = await roasterServ.GetAllRoasters(CurEnviroment);
		contactedCount = roasters.Where(r => r.ContactedForPermission).Count();
		recievedPermissionCount = roasters.Where(r => r.RecievedPermission).Count();
		StateHasChanged();
	}

	private async Task HandleRoasterEdited(string roasterName)
	{
		await RefreshData();
	}

	private async Task HandleRoasterDeleted(string roasterName)
	{
		await RefreshData();
	}

	private async Task HandleNewRoaster()
	{
		await RefreshData();
	}
}
