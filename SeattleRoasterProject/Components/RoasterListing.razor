@inject RoasterService roasterServ

<ScrapedBeanListings NewBeans="scrapedNewBeans" RemovedBeans="scrapeRemovedBeans"></ScrapedBeanListings>

@if (roasters != null)
{
	<div class="row row-cols-1 row-cols-md-3 g-3">
		@foreach (RoasterModel roaster in roasters)
		{
			<div class="col">
				<div class="card">
					<div class="card-header pt-1 pb-0">
						<h5 class="card-title">
							@if(!String.IsNullOrEmpty(roaster.ImageURL) )
							{
								<img src="@roaster.ImageURL" class="rounded roasterImage me-1 @roaster.ImageClass" alt="@roaster.Name">
							}
							@roaster.Name
						</h5>
					</div>
					<div class="card-body">
						<p class="mb-2">@roaster.Description</p>
						<p>Location: @roaster.Location</p>
						@if(roaster.FoundingYear != 0)
						{
							<span class="mb-2">Founded: @roaster.FoundingYear</span>
						}
					</div>
					<div class="card-footer d-flex justify-content-between">
						<a href=@roaster.ShopURL target="_blank" class="btn btn-link btn-sm">Shop</a>
						<div>
							<button class="btn btn-primary btn-sm" @onclick="@(e => RefreshRoasterListings(roaster))" disabled=@isScraping>
								<div class="spinner-border spinner-border-sm @scrapingSpinnerClass" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
								<span class="bi bi-arrow-clockwise"></span>
							</button>
						</div>
						<button class="btn btn-primary btn-sm" @onclick="@(e => EditRoaster(roaster))"><span class="bi bi-pencil"></span></button>
					</div>
				</div>
			</div>
		}
	</div>

	<EditRoasterForm @ref="editRoaster" OnRoasterUpdated="HandleRoasterEdited" OnRoasterDeleted="HandleRoasterDeleted"></EditRoasterForm>
}

@code {
	private List<RoasterModel>? roasters;

	private EditRoasterForm editRoaster;

	private List<BeanModel> scrapedNewBeans;
	private List<BeanModel> scrapeRemovedBeans;

	private bool isScraping = false;
	private string scrapingSpinnerClass = "d-none";

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task EditRoaster(RoasterModel clickedRoaster)
	{
		await editRoaster.EditRoaster(clickedRoaster);
	}

	private async Task RefreshRoasterListings(RoasterModel refRoaster)
	{
		scrapingSpinnerClass = "";
		isScraping = true;

		var results = await roasterServ.CheckForUpdate(refRoaster);
		scrapedNewBeans = results.newListings;
		scrapeRemovedBeans = results.removedListings;

		scrapingSpinnerClass = "d-none";
		isScraping = false;
	}

	public async Task RefreshData()
	{
		await GetData();
	}

	private async Task GetData()
	{
		roasters = await roasterServ.GetRoastersFromDb();
		StateHasChanged();
	}

	private async Task HandleRoasterEdited(string roasterName)
	{
		await RefreshData();
	}

	private async Task HandleRoasterDeleted(string roasterName)
	{
		await RefreshData();
	}
}
