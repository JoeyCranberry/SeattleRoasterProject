@inject RoasterService roasterServ

<ScrapedBeanListings NewBeans="scrapedNewBeans" RemovedBeans="scrapeRemovedBeans"></ScrapedBeanListings>

<AddRoasterForm OnRoasterAdded="HandleNewRoaster"></AddRoasterForm>

@if (roasters != null)
{
	<div class="row mb-3 justify-content-center">
		<small class="text-center text-faded">@contactedCount contacted, @recievedPermissionCount have given permission, @(roasters.Count - contactedCount) remaining</small>
	</div>
	<div class="row row-cols-1 row-cols-md-3 g-3">
		@foreach (RoasterModel roaster in roasters)
		{
			<div class="col">
				<div class="card">
					<div class="card-header pt-1 pb-0 ">
						<h5 class="card-title">
							@if (!String.IsNullOrEmpty(roaster.ImageURL))
							{
								<img src="@roaster.ImageURL" class="rounded roasterImage me-1 @roaster.ImageClass" alt="@roaster.Name">
							}
							@roaster.Name
						</h5>
					</div>

					<div class="card-body pt-1">
						<div class="row mb-2">
							<div class="col-12">
								@if (roaster.HasParser)
								{
									<span class="badge rounded-pill border me-1">Has Parser</span>
								}
								@if (roaster.ContactedForPermission)
								{
									<span class="badge rounded-pill border me-1">Contacted</span>
								}
								@if (roaster.RecievedPermission)
								{
									<span class="badge rounded-pill border border-success me-1">Recived Permission</span>
								}
							</div>
						</div>

						<p class="mb-2">@roaster.Description</p>
						<p>Location: @roaster.Location</p>
						@if (roaster.FoundingYear != 0)
						{
							<span class="mb-2">Founded: @roaster.FoundingYear</span>
						}
					</div>
					<div class="card-footer d-flex justify-content-between">
						<a href=@roaster.ShopURL target="_blank" class="btn btn-primary">Shop</a>
						@if (roaster.HasParser)
						{
							<div>
								<button class="btn btn-primary btn-sm" @onclick="@(e => RefreshRoasterListings(roaster))" disabled=@isScraping>
									<div class="spinner-border spinner-border-sm @scrapingSpinnerClass" role="status">
										<span class="visually-hidden">Loading...</span>
									</div>
									<span class="bi bi-arrow-clockwise"></span>
								</button>
							</div>
						}

						<button class="btn btn-primary btn-sm" @onclick="@(e => EditRoaster(roaster))"><span class="bi bi-pencil"></span></button>
					</div>
				</div>
			</div>
		}
	</div>

	<RoasterUpdatingToast @ref=updatingToast></RoasterUpdatingToast>

	<EditRoasterForm @ref="editRoaster" OnRoasterUpdated="HandleRoasterEdited" OnRoasterDeleted="HandleRoasterDeleted"></EditRoasterForm>
}

@code {
	private List<RoasterModel>? roasters;

	private EditRoasterForm editRoaster;
	private RoasterUpdatingToast updatingToast;

	private List<BeanModel> scrapedNewBeans;
	private List<BeanModel> scrapeRemovedBeans;

	private bool isScraping = false;
	private string scrapingSpinnerClass = "d-none";

	private int contactedCount = 0;
	private int recievedPermissionCount = 0;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task EditRoaster(RoasterModel clickedRoaster)
	{
		await editRoaster.EditRoaster(clickedRoaster);
	}

	private async Task RefreshRoasterListings(RoasterModel refRoaster)
	{
		isScraping = true;
		await updatingToast.AddNewToast(refRoaster.Name);

		var results = await roasterServ.CheckForUpdate(refRoaster);
		scrapedNewBeans = results.newListings;
		scrapeRemovedBeans = results.removedListings;

		isScraping = false;
		await updatingToast.HideToast();
	}

	public async Task RefreshData()
	{
		await GetData();
	}

	private async Task GetData()
	{
		roasters = await roasterServ.GetRoastersFromDb();
		contactedCount = roasters.Where(r => r.ContactedForPermission).Count();
		recievedPermissionCount = roasters.Where(r => r.RecievedPermission).Count();
		StateHasChanged();
	}

	private async Task HandleRoasterEdited(string roasterName)
	{
		await RefreshData();
	}

	private async Task HandleRoasterDeleted(string roasterName)
	{
		await RefreshData();
	}

	private async Task HandleNewRoaster()
	{
		await RefreshData();
	}
}
