@if(bean != null)
{
	<div class="card-body pt-1">
		<div class="row d-flex justify-content-start pb-2">
			<h5 class="card-title mb-0">
				@bean.FullName
			</h5>
			<hr class="my-1" />
			<div class="px-0 mt-1 mb-2 col-12">
				@if (bean.IsSingleOrigin)
				{
					<span class="badge rounded-pill border me-1">Single Origin</span>
				}
				else
				{
					<span class="badge rounded-pill border me-1">Blend</span>
				}
				@if (bean.IsDecaf)
				{
					<span class="badge rounded-pill border me-1">Decaf</span>
				}

				@if (bean.IsFairTradeCertified)
				{
					<span class="badge rounded-pill border me-1">Fair Trade</span>
				}

				@if (bean.IsDirectTradeCertified)
				{
					<span class="badge rounded-pill border me-1">Direct Trade</span>
				}

				@if (bean.OrganicCerification == OrganicCerification.CERTIFIED_ORGANIC)
				{
					<span class="badge rounded-pill border me-1">Cerified Organic</span>
				}

				@if (bean.OrganicCerification == OrganicCerification.UNCERTIFIED_ORGANIC)
				{
					<span class="badge rounded-pill border me-1">Uncerified Organic</span>
				}

				@if (bean.AvailablePreground)
				{
					<span class="badge rounded-pill border me-1">Available Pre-ground</span>
				}

				@if (!bean.InStock)
				{
					<span class="badge rounded-pill border-danger border me-1">Out-of-Stock</span>
				}

				@switch (bean.ProcessingMethod)
				{
					case BeanProcessing.NATURAL:
						<span class="badge rounded-pill border me-1">Natural</span>
						break;
					case BeanProcessing.WASHED:
						<span class="badge rounded-pill border me-1">Washed</span>
						break;
					case BeanProcessing.WET_HULLED:
						<span class="badge rounded-pill border me-1">Wet Hulled</span>
						break;
					case BeanProcessing.HONEY:
						<span class="badge rounded-pill border me-1">Honey</span>
						break;
				}
			</div>

		</div>
		<div class="row">
			<div class="col-4 p-0 m-0">
				@if (!String.IsNullOrEmpty(bean.ImageURL))
				{
					<img src="@bean.ImageURL" class="rounded beansImage @bean.ImageClass" alt="@bean.FullName">
				}
			</div>
			<div class="col-7 ms-2">
				
				<div class="row">
					@if (bean.CountriesOfOrigin != null)
					{
						<ul class="list-group mx-0 mb-2">
							@foreach (Country country in bean.CountriesOfOrigin)
							{
								<li class="list-group-item">@BeanModel.GetCountryDisplayName(country, true)</li>
							}
						</ul>
					}

					@if (bean.RegionsOfOrigin != null)
					{
						<ul class="list-group mx-0 mb-2">
							@foreach (Region region in bean.RegionsOfOrigin)
							{
								<li class="list-group-item">@BeanModel.GetRegionDisplayName(region)</li>
							}
						</ul>
					}
				</div>
				@if (bean.RoastLevel != RoastLevel.UNKNOWN)
				{
					<div class="row mb-1">
						<span class="px-0"><b>Roast Level:</b> @bean.GetDisplayRoastLevel()</span>
					</div>
				}
				<div class="row">
					@if (bean.TastingNotes != null && bean.TastingNotes.Count > 0)
					{
						<span class="px-0"><b>Tasting Notes:</b> @String.Join(", ", @bean.TastingNotes)</span>
					}
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public BeanModel bean { get; set; }
}
