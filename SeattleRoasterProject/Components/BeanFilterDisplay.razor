@inject BeanFilterService filterServ

<div class="row">
	<EditForm Model="@filter" style="width=50vw;">
		<InputText @bind-Value="filter.SearchTerms" placeholder="@GetRandomSearchSuggestion()" style="width:40vw;"></InputText>

		<button type="button" class="btn btn-primary" @onclick="ApplyFilter">
			<span class="bi bi-search">Search Beans</span>
		</button>
	</EditForm>
</div>

@code {
	[Parameter]
	public EventCallback<BeanFilter> OnBeanFilterSearch { get; set; }

	private FilterModel filter = new FilterModel();

	public class FilterModel
	{
		public string SearchTerms { get; set; } = String.Empty;
	}

	public async Task ApplyFilter()
	{
		await OnBeanFilterSearch.InvokeAsync(BuildFilter(filter));
	}

	private BeanFilter BuildFilter(FilterModel model)
	{
		return filterServ.BuildFilterFromSearchTerms(model.SearchTerms);
	}

	private string GetRandomSearchSuggestion()
	{
		List<string> processTerms = new List<string>() {"washed", "natural", "wet hulled"};
		List<string> roastTerms = new List<string>() { "light", "medium", "dark" };
		List<string> countryTerm = new List<string>();
		foreach(Country country in Enum.GetValues<Country>())
		{
			if (country != Country.UNKNOWN)
			{
				countryTerm.Add(BeanModel.GetCountryPossesiveTerm(country));
			}
		}

		List<string> otherTerms = new List<string>() { "single origin", "blend", "organic", "fair trade", "direct trade", "decaf", "caffeinated" };

		Random random = new Random();
		List<string> randomTerms = new List<string>();

		randomTerms.Add(otherTerms[random.Next(otherTerms.Count)]);

		if(random.Next(2) == 0)
		{
			randomTerms.Add(processTerms[random.Next(processTerms.Count)]);
		}
		else
		{
			randomTerms.Add(roastTerms[random.Next(roastTerms.Count)] + " roast");
		}

		randomTerms.Add(countryTerm[random.Next(countryTerm.Count)]);

		return "search for a... " +  String.Join(" ", randomTerms);
	}
}
