@using System.Diagnostics

@inject IJSRuntime JSRuntime
@inject BeanService beanServ
@inject RoasterService roasterServ
@inject BeanSortingService sortServ

@if (listings != null)
{
	<div class="row mb-3 justify-content-center">
		@if (firstLoad)
		{
			<div class="spinner-border text-light" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
			<small class="text-center text-faded">Loading beans...</small>

			<div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
				@for (int i = 0; i < 9; i++)
				{
					<PlaceholderBeanCard></PlaceholderBeanCard>
				}
			</div>
		}
		else
		{
			@if (!searchReturnedResults || listings.Count == 0)
			{
				<span class="text-center">No results for that search...</span>
			}
			else
			{
				@if (!searchIsExactMatch)
				{
					<span class="text-center">We couldn't find exactly that search, but here's something close</span>
				}

				<small class="text-center text-faded">@listings.Count results (@timeElapsedDisplay)</small>
			}
		}
	</div>
	<div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
		@foreach (BeanListingModel listing in listings)
		{
			<div class="card mx-3 shadow px-3 py-1">
				<RoasterCardHeader Roaster="listing.Roaster"></RoasterCardHeader>
				<BeanCardBody bean="listing.Bean"></BeanCardBody>
				<div class="card-footer px-0 gx-0 row d-flex justify-content-between">
					<div class="col-6 justify-content-start">
						<BeanPrice Bean="listing.Bean"></BeanPrice>
					</div>

					<div class="col-4">
						<span data-bs-toggle="tooltip" data-bs-html="true" data-bs-title="@((MarkupString)listing.Bean.GetSourcingScoreBreakdown())">
							@((MarkupString)listing.Bean.GetSourcingScoreDisplay())
						</span>
					</div>

					<div class="col-2">
						<button class="btn btn-primary btn-sm" @onclick="@(e => EditBean(listing.Bean))"><span class="bi bi-pencil"></span></button>
					</div>
				</div>
			</div>
		}
	</div>

	<EditBeanForm @ref="editBeans" OnBeanUpdated="HandleBeanEdited" OnBeanDeleted="HandleBeanDeleted" Roasters="roasters"></EditBeanForm>
}
else
{
	<div class="spinner-border text-light" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
	<small class="text-center text-faded">Loading beans...</small>
}

@code {
	private EditBeanForm? editBeans;

	private List<BeanModel>? beans;

	private BeanFilter? curFilter;
	private Dictionary<string, RoasterModel> roasters;

	private List<BeanListingModel> listings = new();

	private Stopwatch stopwatch = new();
	private string timeElapsedDisplay = "";

	private bool searchIsExactMatch = false;
	private bool searchReturnedResults = false;

	private bool firstLoad = true;

	private SortMethod? activeMethod;

	protected override async Task OnInitializedAsync()
	{
		roasters = new Dictionary<string, RoasterModel>();
		var allRoasters = await roasterServ.GetRoastersFromDb();
		foreach (RoasterModel roaster in allRoasters)
		{
			roasters[roaster.Id] = roaster;
		}

		await GetData();

		firstLoad = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JSRuntime.InvokeVoidAsync("IntializeTooltips");
	}

	private async Task GetData()
	{
		stopwatch.Restart();

		if (curFilter == null)
		{
			var getResult = await beanServ.GetBeansByFilter(new BeanFilter()
				{
					IsExcluded = new FilterValueBool(true, false),
					IsInStock = new FilterValueBool(true, true)
				});

			if (getResult.Results != null)
			{
				beans = getResult.Results;
				searchIsExactMatch = getResult.IsExactMatch;
				searchReturnedResults = true;
			}
			else
			{
				searchReturnedResults = false;
			}
		}
		else
		{
			var getResult = await beanServ.GetBeansByFilter(curFilter);
			if (getResult.Results != null)
			{
				beans = getResult.Results;
				searchIsExactMatch = getResult.IsExactMatch;
				searchReturnedResults = true;
			}
			else
			{
				searchReturnedResults = false;
			}
		}

		listings.Clear();

		foreach (BeanModel bean in beans)
		{
			listings.Add(new BeanListingModel()
				{
					Bean = bean,
					Roaster = bean.MongoRoasterId != null ? roasters[bean.MongoRoasterId] : new RoasterModel()
				});
		}

		ApplySort();

		stopwatch.Stop();
		timeElapsedDisplay = stopwatch.ElapsedMilliseconds.ToString() + " ms";

		StateHasChanged();
	}

	private void ApplySort()
	{
		if (activeMethod == null)
		{
			listings = sortServ.SortBeanListings(listings, new SortMethod() { SortByField = SortMethod.SORT_FIELD.DEFAULT });
		}
		else
		{
			listings = sortServ.SortBeanListings(listings, activeMethod);
		}

		StateHasChanged();
	}

	private async Task EditBean(BeanModel clickedBean)
	{
		if (editBeans != null)
		{
			await editBeans.EditBean(clickedBean);
		}
	}

	private async Task HandleBeanEdited(string beanName)
	{
		await RefreshData();
	}

	private async Task HandleBeanDeleted(string beanName)
	{
		await RefreshData();
	}

	public void SetActiveSort(SortMethod method)
	{
		activeMethod = method;
		ApplySort();
	}

	public async Task RefreshData()
	{
		await GetData();
	}

	public async Task ApplyFilter(BeanFilter newFilter)
	{
		curFilter = newFilter;
		await RefreshData();
	}
}
