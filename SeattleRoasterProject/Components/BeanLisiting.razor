@inject BeanService beanServ

@if (beans != null)
{
	<div class="row row-cols-1 row-cols-md-3 g-3">
		@foreach (BeanModel bean in beans)
		{
			<div class="card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						@bean.FullName
					</h5>
				</div>
				<BeanCardBody bean="bean"></BeanCardBody>
				<div class="card-footer d-flex justify-content-between">
					<a href="@bean.ProductURL">$@bean.PriceBeforeShipping</a>
					<button class="btn btn-primary btn-sm" @onclick="@(e => EditBean(bean))"><span class="bi bi-pencil"></span></button>
				</div>
			</div>
		}
	</div>

	<EditBeanForm @ref="editBeans" OnBeanUpdated="HandleBeanEdited" OnBeanDeleted="HandleBeanDeleted"></EditBeanForm>
}

@code {
	private EditBeanForm editBeans;

	private List<BeanModel>? beans;

	private BeanFilter? curFilter;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		if(curFilter == null)
		{
			beans = await beanServ.GetBeans();
		}
		else
		{
			beans = await beanServ.GetBeansByFilter(curFilter);
		}

		StateHasChanged();
	}

	private async Task EditBean(BeanModel clickedBean)
	{
		await editBeans.EditBean(clickedBean);
	}

	private async Task HandleBeanEdited(string beanName)
	{
		await RefreshData();
	}

	private async Task HandleBeanDeleted(string beanName)
	{
		await RefreshData();
	}

	public async Task RefreshData()
	{
		await GetData();
	}

	public async Task ApplyFilter(BeanFilter newFilter)
	{
		curFilter = newFilter;
		await RefreshData();
	}
}
