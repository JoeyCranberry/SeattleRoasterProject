@inject BeanService beanServ

@if (beans != null)
{
	<div class="row row-cols-1 row-cols-md-3 g-3">
		@foreach (BeanModel bean in beans)
		{
			<div class="card">
				<div class="card-header">
					<h5 class="card-title mb-0">
						@bean.FullName
					</h5>
				</div>
				<div class="card-body pt-1">
					<div class="row d-flex justify-content-start pb-2">
						<div class="col-12">
							@if (bean.IsSingleOrigin)
							{
								<span class="badge rounded-pill border">Single Origin</span>
							}
							else
							{
								<span class="badge rounded-pill border">Blend</span>
							}
							@if (bean.IsDecaf)
							{
								<span class="badge rounded-pill border">Decaf</span>
							}

							@if (bean.IsFairTradeCertified)
							{
								<span class="badge rounded-pill border">Fair Trade</span>
							}

							@if (bean.IsDirectTradeCertified)
							{
								<span class="badge rounded-pill border">Direct Trade</span>
							}

							@if (bean.OrganicCerification == OrganicCerification.CERTIFIED_ORGANIC)
							{
								<span class="badge rounded-pill border">Cerified Organic</span>
							}

							@if (bean.OrganicCerification == OrganicCerification.UNCERTIFIED_ORGANIC)
							{
								<span class="badge rounded-pill border">Uncerified Organic</span>
							}

							@switch(bean.ProcessingMethod)
							{
								case BeanProcessing.NATURAL:
									<span class="badge rounded-pill border">Natural</span>
									break;
								case BeanProcessing.WASHED:
									<span class="badge rounded-pill border">Washed</span>
									break;
								case BeanProcessing.WET_HULLED:
									<span class="badge rounded-pill border">Wet Hulled</span>
									break;
								case BeanProcessing.HONEY:
									<span class="badge rounded-pill border">Honey</span>
									break;
							}
						</div>
					</div>
					<div class="row">
						<div class="col-4 p-0 m-0">
							@if (!String.IsNullOrEmpty(bean.ImageURL))
							{
								<img src="@bean.ImageURL" class="rounded beansImage @bean.ImageClass" alt="@bean.FullName">
							}
						</div>
						<div class="col-7 ms-2">
							<div class="row">
								@if (bean.CountriesOfOrigin != null)
								{
									<ul class="list-group bg-coffee">
										@foreach (Country country in bean.CountriesOfOrigin)
										{
											<li class="list-group-item">@bean.GetCountryDisplayName(country, true)</li>
										}
									</ul>
								}
							</div>
							<div class="row">
								@if(bean.TastingNotes != null)
								{
									@String.Join(",", @bean.TastingNotes)
								}
							</div>
						</div>
					</div>
				</div>
				<div class="card-footer d-flex justify-content-between">
					<a href="@bean.ProductURL">$@bean.PriceBeforeShipping</a>
					<button class="btn btn-primary btn-sm" @onclick="@(e => EditBean(bean))"><span class="bi bi-pencil"></span></button>
				</div>
			</div>
		}
	</div>

	<EditBeanForm @ref="editBeans" OnBeanUpdated="HandleBeanEdited" OnBeanDeleted="HandleBeanDeleted"></EditBeanForm>
}

@code {
	private EditBeanForm editBeans;

	private List<BeanModel>? beans;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		beans = await beanServ.GetSingleOrginEthiopianBeans();
	}

	private async Task EditBean(BeanModel clickedBean)
	{
		await editBeans.EditBean(clickedBean);
	}

	private async Task HandleBeanEdited(string beanName)
	{
		await RefreshData();
	}

	private async Task HandleBeanDeleted(string beanName)
	{
		await RefreshData();
	}

	public async Task RefreshData()
	{
		await GetData();
	}
}
