@using RoasterBeansDataAccess.Services
@using SeattleRoasterProject.Core.Models
@inject BeanService _beanService
@inject EnvironmentSettings _environmentSettings

@if (RoasterLookup != null)
{
    @if (NewBeans != null)
    {
        @if (NewBeans.Count > 0)
        {
            <h2 class="text-light text-center">
                Beans Added (@NewBeans.Count)
                <button type="submit" class="btn btn-success" disabled=@isAdding @onclick="AddAllBeans">
                    <div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="bi bi-plus"></span>
                    Add All New
                </button>
            </h2>

            <div class="row text-center">
                <span class="text-opacity-50">@addedExcludedCount Excluded</span>
            </div>

            <div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
                @foreach (var bean in NewBeans)
                {
                    <div class="card mx-3 px-3 py-1 shadow">
                        <RoasterCardHeader Roaster="@RoasterLookup[bean.MongoRoasterId]"></RoasterCardHeader>
                        <BeanCardBody bean="bean"></BeanCardBody>
                        <div class="card-footer row">
                            <div class="row">
                                <div class="col-6 justify-content-start">
                                    <BeanPrice Bean="bean"></BeanPrice>
                                </div>
                            </div>
                            <hr class="my-1"/>
                            <div class="row mt-1">
                                <div class="col-6">
                                    <button type="button" class="btn btn-warning" @onclick="@(e => ToggleExludeBean(bean))">
                                        @if (bean.IsExcluded)
                                        {
                                            <span class="bi bi-slash-square-fill pe-2"></span>

                                            <span>Un-exclude</span>
                                        }
                                        else
                                        {
                                            <span class="bi bi-slash-square pe-2"></span>

                                            <span>Exclude</span>
                                        }
                                    </button>
                                </div>
                                <div class="col-6 d-flex justify-content-end">
                                    <button type="submit" class="btn btn-success" disabled=@isAdding @onclick="@(e => AddBean(bean))">
                                        <div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="bi bi-plus"></span>
                                        Add
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="row text-center">
                <span class="text-muted">No new listings</span>
            </div>
        }
    }

    @if (RemovedListings != null)
    {
        @if (RemovedListings.Count > 0)
        {
            <h2 class="text-light mt-5 text-center">
                Listings Removed (@RemovedListings.Count)

                <button type="submit" class="btn btn-warning" @onclick="SetAllBeansInactive">
                    <div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="bi bi-archive"></span>
                    Set All Inactive
                </button>
            </h2>

            <div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
                @foreach (var bean in RemovedListings)
                {
                    <div class="card mx-3 px-3 py-1 shadow">
                        <RoasterCardHeader Roaster="@RoasterLookup[bean.MongoRoasterId]"></RoasterCardHeader>
                        <BeanCardBody bean="bean"></BeanCardBody>
                        <div class="card-footer row">
                            <div class="col-7 justify-content-start">
                                <BeanPrice Bean="bean"></BeanPrice>
                            </div>

                            <div class="col-5">
                                <div class="d-flex justify-content-end container px-0">
                                    <button type="submit" class="btn btn-warning" disabled=@isAdding @onclick="@(e => SetBeanInactive(bean))">
                                        <div class="spinner-border spinner-border-sm @removeSpinnerDisplay" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="bi bi-archive"></span>
                                        Set Inactive
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="row text-center">
                <span class="text-muted">No removed listings</span>
            </div>
        }
    }

    @if (ActivatedListings != null)
    {
        @if (ActivatedListings.Count > 0)
        {
            <h2 class="text-light mt-5 text-center">
                Listings Activated (@ActivatedListings.Count)

                <button type="submit" class="btn btn-success" @onclick="SetAllBeansActive">
                    <div class="spinner-border spinner-border-sm @addingSpinnerDisplay" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="bi bi-clipboard-plus"></span>
                    Set All Active
                </button>
            </h2>

            <div class="row row-cols-1 row-cols-md-3 gy-4 justify-content-center">
                @foreach (var bean in ActivatedListings)
                {
                    <div class="card mx-3 px-3 py-1 shadow">
                        <RoasterCardHeader Roaster="@RoasterLookup[bean.MongoRoasterId]"></RoasterCardHeader>
                        <BeanCardBody bean="bean"></BeanCardBody>
                        <div class="card-footer row">
                            <div class="col-7 justify-content-start">
                                <BeanPrice Bean="bean"></BeanPrice>
                            </div>

                            <div class="col-5">
                                <div class="d-flex justify-content-end container px-0">
                                    <button type="submit" class="btn btn-success" disabled=@isAdding @onclick="@(e => SetBeanActive(bean))">
                                        <div class="spinner-border spinner-border-sm @removeSpinnerDisplay" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="bi bi-clipboard-plus"></span>
                                        Set Activate
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="row text-center">
                <span class="text-muted">No activated listings</span>
            </div>
        }
    }
}


@if (NewBeans != null && RemovedListings != null)
{
    <hr/>
}


@code {
    [Parameter] public List<BeanModel>? NewBeans { get; set; }

    [Parameter] public List<BeanModel>? RemovedListings { get; set; }

    [Parameter] public List<BeanModel>? ActivatedListings { get; set; }

    [Parameter] public List<RoasterModel>? Roasters { get; set; }
    private Dictionary<string, RoasterModel>? RoasterLookup;

    private bool isAdding = false;
    private string addingSpinnerDisplay = "d-none";

    private string removeSpinnerDisplay = "d-none";

    private int addedExcludedCount = 0;

    protected override void OnParametersSet()
    {
        SetExcludedCount();

        if (RoasterLookup == null && Roasters != null)
        {
            RoasterLookup = new Dictionary<string, RoasterModel>();
            foreach (var roaster in Roasters)
            {
                RoasterLookup.Add(roaster.Id, roaster);
            }
        }
    }

    private async Task AddBean(BeanModel newBean)
    {
        isAdding = true;
        addingSpinnerDisplay = "";

        newBean.IsProductionVisible = false;

        await _beanService.AddBeanToDb(newBean);
        if (NewBeans != null)
        {
            NewBeans.Remove(newBean);

            SetExcludedCount();
        }

        isAdding = false;
        addingSpinnerDisplay = "d-none";
    }

    private async Task AddAllBeans()
    {
        if (NewBeans != null)
        {
            foreach (var bean in NewBeans)
            {
                bean.IsProductionVisible = false;
                await _beanService.AddBeanToDb(bean);
            }

            NewBeans.Clear();

            SetExcludedCount();
        }
    }

    private async Task SetBeanInactive(BeanModel actBean)
    {
        removeSpinnerDisplay = "";

        await _beanService.SetBeanToInactive(actBean);
        if (RemovedListings != null)
        {
            RemovedListings.Remove(actBean);
        }

        removeSpinnerDisplay = "d-none";
    }

    private async Task SetAllBeansInactive()
    {
        removeSpinnerDisplay = "";

        if (RemovedListings != null)
        {
            foreach (var bean in RemovedListings)
            {
                await _beanService.SetBeanToInactive(bean);
            }

            RemovedListings.Clear();
        }

        removeSpinnerDisplay = "d-none";
    }

    private async Task SetBeanActive(BeanModel actBean)
    {
        removeSpinnerDisplay = "";

        actBean.IsActiveListing = true;
        await _beanService.UpdateExistingBean(actBean);
        if (ActivatedListings != null)
        {
            ActivatedListings.Remove(actBean);
        }

        removeSpinnerDisplay = "d-none";
    }

    private async Task SetAllBeansActive()
    {
        removeSpinnerDisplay = "";

        if (ActivatedListings != null)
        {
            foreach (var bean in ActivatedListings)
            {
                bean.IsActiveListing = true;
                await _beanService.UpdateExistingBean(bean);
            }

            ActivatedListings.Clear();
        }

        removeSpinnerDisplay = "d-none";
    }

    private void ToggleExludeBean(BeanModel exBean)
    {
        exBean.IsExcluded = !exBean.IsExcluded;
        SetExcludedCount();
    }

    private void SetExcludedCount()
    {
        if (NewBeans != null)
        {
            addedExcludedCount = NewBeans.Where(b => b.IsExcluded).Count();
        }
    }

}