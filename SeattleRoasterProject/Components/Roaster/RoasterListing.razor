@using RoasterBeansDataAccess.Services
@inject RoasterService roasterServ
@inject JsInteropService JsInterop

<ScrapedBeanListings NewBeans="scrapedNewBeans" RemovedListings="@scrapedRemovedListings" ActivatedListings="@scrapedActivatedBeans" Roasters="roasters"></ScrapedBeanListings>

@if (roasters != null)
{
    <div class="row">
        <div class="col-4 d-flex justify-content-center">
            <AddRoasterForm OnRoasterAdded="HandleNewRoaster"></AddRoasterForm>
        </div>
        <div class="col-4 col-3 d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="UpdateAllRoasterListings">
                <span class="bi bi-arrow-clockwise pe-2"></span>
                Update All Roasters
            </button>
        </div>

        <div class="col-4 col-3 d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="UpdateRoastersWithPermission">
                <span class="bi bi-arrow-clockwise pe-2"></span>
                Update Roasters w/ Permission
            </button>
        </div>
    </div>

    <div class="row justify-content-center mb-3">
        <small class="text-faded text-center">@contactedCount contacted, @recievedPermissionCount have given permission, @(roasters.Count - contactedCount) remaining</small>
    </div>
    <div class="row row-cols-3 row-cols-md-3 gy-4 justify-content-center">
        @foreach (var roaster in roasters)
        {
            <div class="col">
                <div class="card">
                    <div class="card-header pt-1 pb-0">
                        <h5 class="card-title">
                            @if (!string.IsNullOrEmpty(roaster.ImageURL))
                            {
                                <img src="@roaster.ImageURL" class="roasterImage me-1 rounded @roaster.ImageClass" alt="@roaster.Name">
                            }
                            @roaster.Name
                        </h5>
                    </div>

                    <div class="card-body pt-1">
                        <div class="row mb-2">
                            <div class="col-12">
                                @if (roaster.HasParser)
                                {
                                    <span class="badge rounded-pill me-1 border">Has Parser</span>
                                }
                                @if (roaster.ContactedForPermission)
                                {
                                    <span class="badge rounded-pill me-1 border">Contacted</span>
                                }
                                @if (roaster.RecievedPermission)
                                {
                                    <span class="badge rounded-pill border-success me-1 border">Recived Permission</span>
                                }
                            </div>
                        </div>

                        <p class="mb-2">@roaster.Description</p>
                        <p>Location: @roaster.Location</p>
                        @if (roaster.FoundingYear != 0)
                        {
                            <span class="mb-2">Founded: @roaster.FoundingYear</span>
                        }
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <a href=@roaster.ShopURL target="_blank" class="btn btn-primary">Shop</a>
                        @if (roaster.HasParser)
                        {
                            <div>
                                <button class="btn btn-primary btn-sm" @onclick="@(e => RefreshRoasterListings(roaster))" disabled=@isScraping>
                                    <div class="spinner-border spinner-border-sm @scrapingSpinnerClass" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <span class="bi bi-arrow-clockwise"></span>
                                </button>
                            </div>
                        }

                        <button class="btn btn-primary btn-sm" @onclick="@(e => EditRoaster(roaster))">
                            <span class="bi bi-pencil"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <RoasterUpdatingToast @ref=updatingToast></RoasterUpdatingToast>

    <ErrorToast @ref=parseErrorToast></ErrorToast>
    <EditRoasterForm @ref="editRoaster" OnRoasterUpdated="HandleRoasterEdited" OnRoasterDeleted="HandleRoasterDeleted"></EditRoasterForm>
}

@code {
    private List<RoasterModel>? roasters;

    private EditRoasterForm? editRoaster;
    private RoasterUpdatingToast? updatingToast;
    private ErrorToast? parseErrorToast;

    private List<BeanModel>? scrapedNewBeans;
    private List<BeanModel>? scrapedRemovedListings;
    private List<BeanModel>? scrapedActivatedBeans;

    private RoasterModel? updatingRoaster;

    private bool isScraping = false;
    private string scrapingSpinnerClass = "d-none";

    private int contactedCount = 0;
    private int recievedPermissionCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task EditRoaster(RoasterModel clickedRoaster)
    {
        await editRoaster.EditRoaster(clickedRoaster);
    }

    private async Task RefreshRoasterListings(RoasterModel refRoaster)
    {
        isScraping = true;

        await updatingToast.AddNewToast(refRoaster.Name, 0);
        updatingRoaster = refRoaster;

        var results = await roasterServ.CheckForUpdate(refRoaster);
        if (results.isSuccessful)
        {
            scrapedNewBeans = results.NewListings ?? new List<BeanModel>();
            scrapedRemovedListings = results.RemovedListings ?? new List<BeanModel>();
            scrapedActivatedBeans = results.ActivatedListings ?? new List<BeanModel>();
        }
        else
        {
            await parseErrorToast.AddNewToast("Error parsing listings");
        }

        isScraping = false;
        await updatingToast.HideToast();
    }

    private async Task UpdateAllRoasterListings()
    {
        await UpdateRoasters(false);
    }

    private async Task UpdateRoastersWithPermission()
    {
        await UpdateRoasters(true);
    }

    private async Task UpdateRoasters(bool requiresPermission)
    {
        if (updatingToast == null || roasters == null)
        {
            return;
        }

        isScraping = true;

        List<RoasterModel> roastersToUpdate = new();

        if (requiresPermission)
        {
            roastersToUpdate = roasters.Where(r => r.HasParser && r.RecievedPermission).ToList();
            await updatingToast.AddNewToast("All Roasters with Permission", roastersToUpdate.Count + 1);
        }
        else
        {
            roastersToUpdate = roasters.Where(r => r.HasParser).ToList();
            await updatingToast.AddNewToast("All Roasters", roastersToUpdate.Count + 1);
        }

        scrapedNewBeans = new List<BeanModel>();
        scrapedActivatedBeans = new List<BeanModel>();
        scrapedRemovedListings = new List<BeanModel>();

        // Iterate over each roaster that has a parser
        for (var i = 0; i < roastersToUpdate.Count; i++)
        {
            var roaster = roastersToUpdate[i];
            if (roaster.HasParser && (roaster.RecievedPermission || !requiresPermission))
            {
                updatingToast.UpdateRoasterName($"{roaster.Name} ({i + 1}/{roastersToUpdate.Count + 1})");
                updatingToast.UpdateProgress($"{roaster.Name}", i + 1);

                // Check for any new or removed bean listings
                var results = await roasterServ.CheckForUpdate(roaster);

                // If there are new/removed beans add them to scraped display
                if (results.isSuccessful)
                {
                    if (results.NewListings != null)
                    {
                        scrapedNewBeans.AddRange(results.NewListings);
                    }

                    if (results.RemovedListings != null)
                    {
                        scrapedRemovedListings.AddRange(results.RemovedListings);
                    }

                    if (results.ActivatedListings != null)
                    {
                        scrapedActivatedBeans.AddRange(results.ActivatedListings);
                    }
                }
                else
                {
                    await parseErrorToast.AddNewToast($"Error parsing listings for roaster {roaster.Name}");
                }
            }
        }

        await JsInterop.ScrollToTop();

        isScraping = false;
        await updatingToast.HideToast();
    }

    public async Task RefreshData()
    {
        await GetData();
    }

    private async Task GetData()
    {
        roasters = await roasterServ.GetAllRoasters();
        contactedCount = roasters.Count(r => r.ContactedForPermission);
        recievedPermissionCount = roasters.Count(r => r.RecievedPermission);
        StateHasChanged();
    }

    private async Task HandleRoasterEdited(string roasterName)
    {
        await RefreshData();
    }

    private async Task HandleRoasterDeleted(string roasterName)
    {
        await RefreshData();
    }

    private async Task HandleNewRoaster()
    {
        await RefreshData();
    }

}