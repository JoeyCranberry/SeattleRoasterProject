@inject JsInteropService JsInterop

<div class="toast-container position-fixed end-0 bottom-0 p-3">
    <div id="parsingToast" class="toast" role="alert" aria-live="assertive" data-bs-autohide="false" aria-atomic="true">
        <div class="toast-header">
            <span class="bi bi-arrow-clockwise pe-1"></span>
            <div class="spinner-border spinner-border-sm text-coffee me-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <strong class="me-auto">@refreshTypeTitle</strong>

            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body text-dark mb-3">
            @if (totalRoastersCount > 0)
            {
                <div class="progress">
                    <div class="progress-bar" role="progressbar" aria-label="Refresh progress" aria-valuenow="@currentProgress" style="width: @((double)currentProgress / totalRoastersCount * 100)%" aria-valuemin="0" aria-valuemax="@totalRoastersCount"></div>
                </div>
            }

            Fetching and parsing store page for @roasterName
        </div>
    </div>
</div>

@code {
    private string roasterName = "";
    private string refreshTypeTitle = "";
    private int currentProgress = 0;
    private int totalRoastersCount = 0;

    public async Task AddNewToast(string _refreshType, int _totalRoastersCount)
    {
        refreshTypeTitle = _refreshType;
        totalRoastersCount = _totalRoastersCount;
        currentProgress = 0;
        await JsInterop.ShowNewToast("parsingToast");

        StateHasChanged();
    }

    public async Task HideToast()
    {
        await JsInterop.HideToast("parsingToast");
    }

    public void UpdateProgress(string currentRoasterName, int roasterIndex)
    {
        roasterName = currentRoasterName;
        currentProgress = roasterIndex;
    }

    public void UpdateRoasterName(string newRoasterName)
    {
        roasterName = newRoasterName;

        StateHasChanged();
    }

}